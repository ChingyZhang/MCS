@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<table id="dg" title="系统表" class="easyui-datagrid" data-options="url:'UD/GetTableList',method:'post',toolbar:'#toolbar',fitcolumns:false,singleSelect:true,pagination:true,pageList:[10,20,30],rownumbers:false,onLoadSuccess:LoadSuccess" style="width: 100%; height: 380px">
    <thead>
        <tr>
            <th field="ID" hidden="true">ID</th>
            <th field="Name">表名</th>
            <th field="DisplayName">显示名称</th>
            <th field="ExtFlag" data-options="formatter:formatYN">可扩展字段</th>
            <th field="ModelName">Model实体名称</th>
            <th field="TreeFlag" data-options="formatter:formatYN">树形结构标志</th>
            <th field="InsertTime" formatter="Common.DateFormatter">新增时间</th>
            <th data-options="field:'Empty',width:80,align:'right',formatter:formatLink">表字段信息</th>
            <!--此处如果绑定了ID字段会导致列隐藏，若在绑定时将隐藏的ID列注释则可以正常显示-->
        </tr>
    </thead>
</table>
<div id="toolbar">
    <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true" onclick="newTable()">添加新表</a>
    <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-edit" plain="true" onclick="editUser()">编辑表</a>
    <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true" onclick="destroyTable()">移除表</a>
</div>

<div id="dlg" class="easyui-dialog" title="添加新表" style="width: 400px; height: 280px; padding: 10px 20px"
    closed="true" buttons="#dlg-buttons">
    <form id="fm" method="post" novalidate>
        <input type="hidden" name="ID" />
        <div class="fitem">
            <label>表名:</label>
            <input name="Name" class="easyui-textbox" required="true">
        </div>
        <div class="fitem">
            <label>显示名称:</label>
            <input name="DisplayName" class="easyui-textbox" required="true">
        </div>
        <div class="fitem">
            <label>是否含扩展字段:</label>
            <select class="easyui-combobox" id="selExt" name="ExtFlag" data-options="valueField:'id',textField:'text',editable:false,required:true" panelheight="48px" style="width: 150px">
                <option value="0">否</option>
                <option value="1" selected>是</option>
            </select>
        </div>
        <div class="fitem">
            <label>Model名称:</label>
            <input name="ModelName" class="easyui-textbox" required="true">
        </div>
        <div class="fitem">
            <label>是否为树形结构:</label>
            <select class="easyui-combobox" id="selTree" name="TreeFlag" data-options="valueField:'id',textField:'text',editable:false" panelheight="48" required="true" style="width: 150px;">
                <option value="0" selected>否</option>
                <option value="1">是</option>
            </select>
        </div>

    </form>
</div>
<div id="dlg-buttons">
    <a href="javascript:void(0)" class="easyui-linkbutton c6" iconcls="icon-ok" onclick="saveTable()" style="width: 90px; flex-align: center;">保存</a>
    <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" onclick="javascript:$('#dlg').dialog('close')" style="width: 90px">取消</a>
</div>
<script type="text/javascript">
    function inherit(p) {//js继承
        if (p == null) throw TypeError;
        if (Object.create) {
            return Object.create(p);
        }
        var t = typeof p;
        if (t != "object" && t != "function") throw TypeError;
        function f() { };
        f.prototype = p;
        return new f();
    }

    var a = "global";
    function fb() {
        b = "inner b";
    }
    function fc() {
        console.log('c赋值前=' + c);
        var c = "inner c";//上下两次log两次输出结果不一致，但上面的log不报错：javascript会默认把语句块中变量的声明移至顶部(此时变量为undefined)，但只有真正执行到变量声明的语句时才会对变量赋值
        console.log('c赋值后=' + c);
        a = a + " handle in c";
        b = b + " handle in c";
        console.log('a=' + a);
        console.log('b=' + b);//在方法中不以var显示声明的变量会默认作为全局变量处理

        var o = { x: 1, y: 2, z: 3 }, arr = [], i = 0;;
        for (arr[i++] in o) console.log(arr[i - 1]);//for/in语句中可对变量进行赋值

        var o = { x: 1, y: 2, a: 10 };
        var p = inherit(o);//p继承自0
        p.z = 3;
        p.x = 4;//p的x属性在读取时会先检查原始对象，如果不存在x属性则沿着原型链往上查找x属性；但对p.x赋值时如果p原始对象不存在x属性则新增，不会去改变p的原型链上对象的x值（js的对象继承只有在读取属性时才有明确体现）
        console.log('o.x=' + o.x + ' and p.x = ' + p.x);
        console.log('resilt=' + p.x + p.y + p.z);
        console.log('resilt=' + (p.x + p.y + p.z));//两个输出结果不同表明在表达式中同时存在数字和字符串的情况下js优先考虑字符串拼接
        delete p.a;
    }



    $(function () {
        fb();
        fc();
    })

    var url;
    function newTable() {

        $('#dlg').dialog('open').dialog('setTitle', '添加新表');
        $('#fm').form('clear');
    }
    function editUser() {
        var row = $('#dg').datagrid('getSelected');
        if (row) {
            $('#dlg').dialog('open').dialog('setTitle', '修改表');
            $('#fm').form('load', row);
        }
    }
    function saveTable() {
        url = 'UD/SaveTable';
        $('#fm').form('submit', {
            url: url,
            onSubmit: function () {
                return $(this).form('validate');
            },
            success: function (result) {
                var result = eval('(' + result + ')');// change the JSON string to javascript object
                if (result.errorMsg) {
                    $.messager.show({
                        title: 'Error',
                        msg: result.errorMsg
                    });
                } else {
                    $('#dlg').dialog('close');        // close the dialog
                    $('#dg').datagrid('reload');    // reload the user data
                }
            }
        });
    }
    function destroyTable() {
        var row = $('#dg').datagrid('getSelected');
        if (row) {
            $.messager.confirm('删除表', '确定要删除此表么?', function (r) {
                if (r) {
                    $.post('UD/DestroyTable', { Guid: row.ID }, function (data) {//此处要注意与后台方法的参数名要一致
                        //var result = eval("(" + data + ")");
                        console.log(data.Success);
                        if (data.ErrorMsg) {
                            $.messager.show({ title: 'Error', msg: data.errorMsg });// show error message
                        } else {
                            $('#dlg').dialog('close');
                            $('#dg').datagrid('reload');    // reload the user data 
                        }
                    }, 'json');
                }
            });
        }
    }

    function formatLink(value, row, index) {
        var url = "UD/Details?TableID=" + row.ID;
        return "<a href='" + url + "' >表字段列表";
    }



    function LoadSuccess(data) {
        if (data.total > 0) {
            var pageNumber = data.rows[0].pageNumber;
            console.log(pageNumber);
            var pageTotal = data.rows[0].pageTotal;
            console.log(pageTotal);
            $(this).datagrid('getPager').pagination({
                total: pageTotal,
                pageNumber: pageNumber
            });
        }
    }

</script>



<script>
    (function ($) {
        function pagerFilter(data) {
            if ($.isArray(data)) {	// is array
                data = {
                    total: data.length,
                    rows: data
                }
            }
            var dg = $(this);
            var state = dg.data('datagrid');
            var opts = dg.datagrid('options');
            if (!state.allRows) {
                state.allRows = (data.rows);
            }
            var start = (opts.pageNumber - 1) * parseInt(opts.pageSize);
            var end = start + parseInt(opts.pageSize);
            data.rows = $.extend(true, [], state.allRows.slice(start, end));
            return data;
        }

        var loadDataMethod = $.fn.datagrid.methods.loadData;
        $.extend($.fn.datagrid.methods, {
            clientPaging: function (jq) {
                return jq.each(function () {
                    var dg = $(this);
                    var state = dg.data('datagrid');
                    var opts = state.options;
                    opts.loadFilter = pagerFilter;
                    var onBeforeLoad = opts.onBeforeLoad;
                    opts.onBeforeLoad = function (param) {
                        state.allRows = null;
                        return onBeforeLoad.call(this, param);
                    }
                    dg.datagrid('getPager').pagination({
                        onSelectPage: function (pageNum, pageSize) {
                            opts.pageNumber = pageNum;
                            opts.pageSize = pageSize;
                            $(this).pagination('refresh', {
                                pageNumber: pageNum,
                                pageSize: pageSize
                            });
                            dg.datagrid('loadData', state.allRows);
                        }
                    });
                    $(this).datagrid('loadData', state.data);
                    if (opts.url) {
                        $(this).datagrid('reload');
                    }
                });
            },
            loadData: function (jq, data) {
                jq.each(function () {
                    $(this).data('datagrid').allRows = null;
                });
                return loadDataMethod.call($.fn.datagrid.methods, jq, data);
            },
            getAllRows: function (jq) {
                return jq.data('datagrid').allRows;
            }
        })
    })(jQuery);

    //$(function () {
    //$('#dg').datagrid('load', 'UD/GetTableList');
    //$('#dg').datagrid('clientPaging');
    //});
</script>
